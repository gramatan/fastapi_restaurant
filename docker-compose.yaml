version: '3.8'

services:
  db:
    container_name: ${DB_CONTAINER_NAME}
    build:
      context: .
      dockerfile: Dockerfile-db
      args:
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
    restart: always
#    To have clear base on every start
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ylab -d resto" ]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SQLALCHEMY_DATABASE_URL=${SQLALCHEMY_DATABASE_URL_DOCKER}
    container_name: ${WEB_CONTAINER_NAME}
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - PYTHONPATH=/app
      - SQLALCHEMY_DATABASE_URL=${SQLALCHEMY_DATABASE_URL_DOCKER}
    volumes:
      - .:/app
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    depends_on:
      - db

  celery-beat:
    container_name: ${CELERY_BEAT_CONTAINER_NAME}
    build:
      context: .
      dockerfile: Dockerfile-celery
    environment:
      - BROKER_URL=${BROKER_URL}
    depends_on:
      - rabbitmq
      - db
      - web
      - redis
    command: [ "celery", "-A", "admin_task:celery_app", "beat", "--loglevel=info" ]

  celery_worker:
    container_name: ${CELERY_WORKER_CONTAINER_NAME}
    build:
      context: .
      dockerfile: Dockerfile-celery
    volumes:
      - ${ADMIN_FILE_PATH}:/app/admin
    environment:
      - BROKER_URL=${BROKER_URL}
    depends_on:
      - rabbitmq
      - db
      - web
      - redis
    command: [ "celery", "-A", "admin_task:celery_app", "worker", "--loglevel=info", "--concurrency", "1", "-P", "solo"]

  rabbitmq:
    container_name: ${RABBITMQ_CONTAINER_NAME}
    image: "rabbitmq:management"
    ports:
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"

  redis:
    container_name: ylab_redis
    image: redis:latest
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"

#  redis-commander:
#    image: rediscommander/redis-commander:latest
#    environment:
#      - REDIS_HOSTS=local:redis:6379
#    ports:
#      - "8081:8081"

volumes:
  postgres_data:
